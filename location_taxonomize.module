<?php

/**
* @file
* A module which creates and maintains a Location Taxonomy
* which is synchronized with Data from the Location module
*/

define('LOCATION_TAXONOMIZE_MODULE_ID', 'location_taxonomize');
define('LOCATION_TAXONOMIZE_MODULE_NAME', 'Location taxonomize');
define('LOCATION_TAXONOMIZE_VOCAB_NAME', 'location_taxonomize');

/**
 * Implements hook_locationapi().
 */
function location_taxonomize_locationapi(&$obj, $op, $a3 = NULL, $a4 = NULL, $a5 = NULL) {
  if (!variable_get('location_taxonomize_enable')) return;
  $vid = variable_get('location_taxonomize_vid');
  switch ($op) {
    // if we're saving a location, synchronize with vocab
    case 'save':
      $hierarchy = array ('country_name','province_name','city');
      $location = _fix_loc_tmp($obj);
      dpm($location);
      $tids = array();
      // this loops through hierarchy levels and saves terms if necessary
      for ($hlevel = 0; $hlevel < count($hierarchy); $hlevel++) {
        $name = $location[$hierarchy[$hlevel]];
        if ($hlevel == 0) $parentid = -1;
        else $parentid = $tids[$hlevel-1];
        $findterm = _find_term($name, $hlevel, $parentid);
        if (!$findterm) {
          $term = (object) array(
            'name' => $name,
            'vid' => $vid,
          );
          if (variable_get('location_taxonomize_save_longname')) {
            _add_longname(&$term, $hlevel, $location);
          }
          if ($hlevel == 0) {
            $term->parent = array(0, );
          } else {
            $term->parent = array($parentid, );
          }
          taxonomy_term_save($term);
          dpm($term);
          $tids[] = $term->tid;
          drupal_set_message('Saved new Location Taxonomy term: ' . $term->name . ' (' . $term->tid . ')');
        }
        else if ($findterm->tid) {$tids[] = $findterm->tid; dpm($findterm); }
      }
  }
}

/**
 * Adds a longname field to a term
 *
 */
function _add_longname(&$term, $hlevel, $location) {
  $opts = variable_get('location_taxonomize_longname');
  $fields = $opts['fields'];
  $longname = array();
  switch ($hlevel) {
    case 0:
      if ($fields['country_name']) $longname[] = $location['country_name'];
    break;
    case 1:
      if ($fields['province_name']) {
        $longname[] = $location['province_name'];
      }
      if ($fields['country_name']) {
        if ($opts['country_code']) {
          if ($opts['cap_co']) $longname[] = strtoupper($location['country']);
          else $longname[] = $location['country'];
        } else {
          $longname[] = $location['country_name'];
        }
      }
    break;
    case 2:
      if ($fields['city']) {
        $longname[] = $location['city'];
      }
      if ($fields['province_name']) {
        if ($opts['province_code']) {
          if ($opts['cap_pr']) $longname[] = strtoupper($location['province']);
          else $longname[] = $location['province'];
        } else  $longname[] = $location['province_name'];
      }
      if ($fields['country_name']) {
        if ($opts['country_code']) {
          if ($opts['cap_co']) $longname[] = strtoupper($location['country']);
          else $longname[] = $location['country'];
        } else {
          $longname[] = $location['country_name'];
        }
      }
    break;
  }
  $count = count($longname);
  $longname_str = '';
  for ($i = 0; $i<$count; $i++) {
    $longname_str .= $longname[$i];
    if ($i != $count-1) $longname_str .= $opts['separator'] . ' ';
  }
  $term->location_taxonomize_longname['und'][0]['value'] = $longname_str;
}

/**
 * Given a name, hierarchy level, and parent id, this function returns the term if such a term
 * exists, and FALSE if it doesn't.
 * It returns TRUE if the term was not found but should not be saved
 * NOTE: $parentid is only necessary if $hlevel > 0. Otherwise, set $parentid = -1
 */
function _find_term($name, $hlevel, $parentid) {
  $terms = taxonomy_get_term_by_name($name);
  if (!$terms) return FALSE;      // there are no terms that match
  $withparent = array();      
  // look through matching terms and find the one(s) with the right parent
  foreach ($terms as $term) {
    //dpm($term);
    $parents = taxonomy_get_parents($term->tid);
    if (!$parents && $parentid == -1) $withparent[] = $term;    // for root-level terms  
    else if (array_pop($parents)->tid == $parentid) $withparent[] = $term;  // for all other terms (one parent is assumed)
    //dpm($withparent);
  }
  if (count($withparent) == 1) {      // there is one term that matches exactly
    //drupal_set_message($name . ' is already in, with the right parent. Not saving.');
    return array_pop($withparent);
  } else if (count($withparent) == 0){  // there are no terms that match exactly
    //drupal_set_message('it\'s in, but with different parent. Saving new term: ' . $name);
    return FALSE;
  }
  // if we get here, there was more than one term that matched exactly
  drupal_set_message('too many terms! couldn\'t save!');
  return TRUE;
}

/**
* A temporary fix for an apparent bug, due to which the country_name field is not updated during the call to
* hook_locationapi
*/
function _fix_loc_tmp($loc) {
  $loc['country_name'] = location_country_name($loc['country']);
  $loc['province_name'] = location_province_name($loc['country'],$loc['province']);
  return $loc;
}

/**
* Implements hook_menu()
*/
function location_taxonomize_menu() {
  $items = array(); 
  // module configuration page
  $items['admin/config/content/location_taxonomize'] = array(
    'title' => 'Location Taxonomize',
    'description' => 'Configuration for Location taxonomize module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('location_taxonomize_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
 
  return $items;
}

/**
* Form function, called by drupal_get_form()
* in location_taxonomize_menu().
*/
function location_taxonomize_form($form, &$form_state) {
  // initialization
  $vid = variable_get('location_taxonomize_vid');
  if (!$vid) {
    $form['location_taxonomize_init'] = array(
      '#type' => 'fieldset',
      '#title' => t('Initialization'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );
    // check if there is already a Location vocab
    $vocab = taxonomy_vocabulary_machine_name_load(LOCATION_TAXONOMIZE_VOCAB_NAME);
    if ($vocab) {
      $possible_vid = $vocab->vid;
      $form['location_taxonomize_init']['method'] = array(
        '#type' => 'radios',
        '#title' => t('Choose an initialization method'),
        '#options' => array(
          'new' => t('Create a new Vocabulary to associate with Location Taxonomize'),
          'existing' => t('Use the existing vocabulary vid ' . $possible_vid),
        ),
        '#description' => t('If you use the existing vocabulary, all your terms will be maintained, and Location 
                            Taxonomize will start adding terms on top of the existing ones. Note that your
                            vocabulary must match the hierarchy structure used by Location Taxonomize, or there 
                            will be unexpected behavior.')
      );
    } else {
      $form['location_taxonomize_init']['method'] = array(
        '#type' => 'radios',
        '#title' => t('Choose an initialization method'),
        '#options' => array(
          'new' => t('Create a new Vocabulary to associate with Location Taxonomize'),
        ),
        '#description' => t('If you want to use an existing Vocabulary, you must change that 
                            Vocabulary\'s machine name to \'' . LOCATION_TAXONOMIZE_VOCAB_NAME . '\'.
                             It will then be available here as an option.'),
      );
      
    }
    return system_settings_form($form);
  }
  // option to enable or disable synchronization
  $form['location_taxonomize_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Synchronize the Location Taxonomy with data from the Location module'),
    '#default_value' => variable_get('location_taxonomize_enable', 1),
    '#description' => t('Turn on or off the main functionality of this module.'),
  );
  // display the status of the current Location Taxonomy
  $form['location_taxonomize_vid'] = array(
    '#type' => 'item',
    '#title' => 'Vocabulary',
    '#markup' => 'Currently using Vocabulary vid ' . variable_get('location_taxonomize_vid'),
  );
  // button to empty the location vocabulary
  $form['emptyvocab'] = array(
    '#type' => 'button',
    '#value' => t('Empty Location Vocab'),
    '#ajax' => array(
                'callback' => 'location_taxonomize_empty_vocab',
                'wrapper' => 'msg-div',
                'method' => 'replace',
                'effect' => 'fade',
                'event' => 'mousedown',
                ),
  );
  // placeholder div for ajax message
  $form['msg-div'] = array(
    '#type' => 'container',
    '#id'=> 'msg-div',
  );
  // option to assign terms to nodes
  $form['location_taxonomize_node_attach'] = array(
    '#type' => 'checkbox',
    '#title' => t('Also attach the appropriate Taxonomy Location terms to nodes'),
    '#description' => t('If this is checked, the terms saved in the Location Taxonomy will also automatically be applied to the 
                        nodes with those locations. Note that...'),
    '#default_value' => variable_get('location_taxonomize_node_attach'),
  );
  $longname_opts = variable_get('location_taxonomize_longname');
  // Long Name fieldset
  $form['location_taxonomize_longname'] = array(
    '#type' => 'fieldset',
    '#title' => t('Long Name'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );
  // option to enable or disable the Full Name field
  $form['location_taxonomize_longname']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save a Long Name field for every term'),
    '#description' => t('e.g. San Francisco, CA, USA'),
    '#default_value' => $longname_opts['enable'],
  );
  // choose fields to use for Full Name field
  $form['location_taxonomize_longname']['fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Long Name fields'),
    '#description' => t('Choose which fields to use when constructing the Long Name'),
    '#options' => _get_location_fields(),
    '#default_value' => $longname_opts['fields'],
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
        ':input[name="location_taxonomize_longname[enable]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['location_taxonomize_longname']['separator'] = array(
    '#type' =>'textfield',
    '#title' => t('Separator'),
    '#maxlength' => 1,
    '#default_value' => $longname_opts['separator'],
    '#size' => 1,
    '#required' => TRUE,
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
        ':input[name="location_taxonomize_longname[enable]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['location_taxonomize_longname']['country_code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the country code instead of its name where it is not the primary item'),
    '#default_value' => $longname_opts['country_code'],
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
        ':input[name="location_taxonomize_longname[enable]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['location_taxonomize_longname']['cap_co'] = array(
    '#type' => 'checkbox',
    '#title' => t('Capitalize country code in Long Name'),
    '#default_value' => $longname_opts['cap_co'],
    '#states' => array(
        // Only show this field when the checkbox is enabled.
        'enabled' => array(
          ':input[name="location_taxonomize_longname[country_code]"]' => array('checked' => TRUE),
        ),
        'visible' => array(
          ':input[name="location_taxonomize_longname[enable]"]' => array('checked' => TRUE),
        ),
      ),
  );
  $form['location_taxonomize_longname']['province_code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the province code instead of its name where it is not the primary item'),
    '#default_value' => $longname_opts['province_code'],
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
        ':input[name="location_taxonomize_longname[enable]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['location_taxonomize_longname']['cap_pr'] = array(
    '#type' => 'checkbox',
    '#title' => t('Capitalize province code in Long Name'),
    '#default_value' => $longname_opts['cap_pr'],
    '#states' => array(
        // Only show this field when the checkbox is enabled.
        'enabled' => array(
          ':input[name="location_taxonomize_longname[province_code]"]' => array('checked' => TRUE),
        ),
        'visible' => array(
          ':input[name="location_taxonomize_longname[enable]"]' => array('checked' => TRUE),
        ),
      ),
  );
  $form['location_taxonomize_longname']['usa'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use \'USA\' instead of \'US\''),
    '#description' => t('Capitalization will depend on capitalization settings'),
    '#default_value' => $longname_opts['usa'],
    '#states' => array(
        // Only show this field when the checkbox is enabled.
        'enabled' => array(
          ':input[name="location_taxonomize_longname[country_code]"]' => array('checked' => TRUE),
        ),
        'visible' => array(
          ':input[name="location_taxonomize_longname[enable]"]' => array('checked' => TRUE),
        ),
      ),
  );
  return system_settings_form($form);
}

/**
* Callback function for location_taxonomize_form
* clears the Location Vocabulary
*/
function location_taxonomize_empty_vocab () {
  $terms = taxonomy_get_tree(variable_get('location_taxonomize_vid'));
  foreach ($terms as $term) {
    taxonomy_term_delete($term->tid);
  }
  $termsnow = taxonomy_get_tree(variable_get('location_taxonomize_vid'));
  if (!$termsnow) return t('Location vocabulary cleared.');
  return t('There was a problem clearing the Location Vocabulary.');
}

function _get_location_fields () {
  $fields = location_field_names(TRUE);
  // for now, only country, city, and state are supported for this
  foreach ($fields as $field => $value) {
    if($field != 'country_name' && $field != 'province_name' && $field != 'city') {
      unset($fields[$field]);
    }
  }
  return $fields;
}