<?php

/**
 * @file
 */

require_once('location_taxonomize_af.inc');

function location_taxonomize_af_field_widget_info_alter(&$info) {
  dpm('1');
  dpm($info);
  // Add a setting to a widget type.
  $info['addressfield_standard']['settings'] += array(
    'location_taxonomize' => 0,
  );
  dpm($info);
}

function location_taxonomize_af_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {
  dpm('2');
  //dpm($form['#field']);
  if ($form['#field']['type'] != 'addressfield') return;
  $settings = $form['#instance']['widget']['settings'];
  dpm($settings);
  $enable = array(
    '#type'           => 'checkbox',
    '#title'          => t('Taxonomize locations from this field using Location Taxonomize'),
    '#default_value'  => $settings['location_taxonomize'],
  );
  $form['instance']['widget']['settings']['location_taxonomize'] = $enable;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function location_taxonomize_af_field_widget_addressfield_standard_form_alter(&$element, &$form_state, $context) {
  //dpm('widget form alter');
  // check if this module is enabled as the current source
  if (_location_taxonomize_get_source() != LT_AF_MODULE_ID) return;
  // apply this only if we are on a node-edit form
  if (!isset($context['form']['#node_edit_form'])) return;
  // check field settings
  $taxonomize = $context['instance']['widget']['settings']['location_taxonomize'];
  // add a process function to addressfield widgets
  if ($taxonomize) {
    $element['#process'][] = 'location_taxonomize_af_process_address';
  }
}

/**
 * A #process callback function for the addressfield widget
 */
function location_taxonomize_af_process_address($element, &$form_state, &$form) {
  dpm('process callback');
  //dpm($element);
  // add a submit handler to forms that have this widget
  $form['#submit'][] = 'location_taxonomize_af_element_submitted';
  // make note that this field needs to be processed in the submit handler
  $form_state['temporary']['addressfields'][] = $element['#field_name'];
  return $element;
}

/**
 * A submit handler for forms that contain an addressfield
 */
function location_taxonomize_af_element_submitted($form, &$form_state) {
  $lang = 'und';
  // Act on values
  $fields = $form_state['temporary']['addressfields'];
  foreach ($fields as $field) {
    $deltas = $form_state['values'][$field][$lang];
    $actual_delta = 0;
    foreach ($deltas as $delta) {
       // Add the Administrative Area name, if possible
       if(isset($form[$field][$lang][$actual_delta]['locality_block']['administrative_area']['#options'])) {
         $options = $form[$field][$lang][$actual_delta]['locality_block']['administrative_area']['#options'];
         $delta['administrative_area_name'] = $options[$delta['administrative_area']];
       }
      // Add the country name
      $delta['country_name'] = location_taxonomize_get_country_name($delta['country']);
      dpm($delta);
      location_taxonomize_af_process_item($delta);
      $actual_delta++;
    }
  }
}

/**
 * Central function that processes an addressfield item and sends it to 
 * Location Taxonomize to be saved into the taxonomy
 */
function location_taxonomize_af_process_item($address) {
  dpm('processing address');
  dpm($address);
  $settings = variable_get('location_taxonomize_settings');
  $vid = variable_get('location_taxonomize_vid');
  // check module settings
  if (!$settings['enable'] || !$vid) return;
  // make sure the province_name and country_name fields are there and updated
  $saved = location_taxonomize_process_item($address);
  $msg = t('Location taxonomize: @num new terms saved', array('@num' => $saved));
  drupal_set_message($msg);
}

/**
 * Runs the bulk taxonomize operation
 */
function location_taxonomize_af_bulk_taxonomize_op($form_state, &$context) {
  // initialize progress, max, and current if this is the first iteration
  if (!isset($context['sandbox']['progress'])) {
    $field_refs = array();
    // get all fields
    $fields = field_info_fields();
    // take out all non-addressfield fields
    foreach($fields as $field => $data) {
      if ($data['type'] != 'addressfield') unset($fields[$field]);
    }
    // collect references to all the fields for which taxonomize is enabled
    foreach($fields as $field) {
      foreach($field['bundles'] as $entity => $bundles) {
        foreach ($bundles as $bundle) {
          $instance =  field_info_instance($entity, $field['field_name'], $bundle);
          if ($instance['widget']['settings']['location_taxonomize'] == 1) {
            $field_refs[] = array($entity, $bundle, $field['field_name']);
          }
        }
      }
    }
    // collect node ids
    $final = array();
    $count = 0;
    foreach($field_refs as $field) {
      $e_type = $field[0];
      $bundle = $field[1]; 
      $field_name = $field[2]; 
      $replace = array(
        ':etype'  => $e_type,
        ':bundle' => $bundle,
      );
      $table = 'field_data_' . $field_name;
      $result = db_query("SELECT entity_id FROM {$table} WHERE entity_type = :etype AND bundle = :bundle ORDER BY entity_id ASC", $replace);
      $result_array = $result->fetchAllAssoc('entity_id');
      foreach($result_array as $e) {
        if ($e_type == 'node') {
          $id = $e->entity_id;
          $final[$id][] = $field_name;
          $count++;
        }
      }
    }
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $count;
    $context['sandbox']['current'] = 0;
    $context['results']['added'] = 0;
    $context['results']['processed'] = 0;
    $context['sandbox']['fields'] = $final;
  }
  // maximum 10 addresses per function iteration
  $limit = 10;
  // iterate through the next group of addresses
  $i = 0;
  $saved = 0;
  if (!empty($context['sandbox']['fields'])) {
    foreach ($context['sandbox']['fields'] as $nid => $fields) {
      $node = node_load($nid);
      foreach ($fields as $field) {
        $items = field_get_items('node', $node, $field);
        foreach ($items as $address) {
          // Add the country name
          $address['country_name'] = location_taxonomize_get_country_name($address['country']);
          // save contents
          dd($address);
          $saved += location_taxonomize_process_item($address);
        }
        $i++;
        if ($i > $limit) break;
        unset($context['sandbox']['fields'][$nid][$field]);
      }
      if ($i > $limit) break;
    }
  }

  $added = $saved;
  $context['results']['added'] += $added;
  $context['sandbox']['progress'] += $i;
  $context['message'] = t('Processing address');
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  $context['sandbox']['current'] = $context['sandbox']['progress'];
  $context['results']['processed'] = $context['sandbox']['progress'];
}